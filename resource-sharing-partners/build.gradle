plugins {
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.owasp.dependencycheck' version '7.0.4.1'
    id 'nebula.lint' version '17.7.0'
}

sourceCompatibility = JavaVersion.VERSION_11  // source-code version and must be <= targetCompatibility
targetCompatibility = JavaVersion.VERSION_11 // bytecode target version

group 'no.sikt'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation group: 'com.github.bibsysdev', name: 'nvatestutils', version: '1.24.8'
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-core', version: '2.2'
    testImplementation group: 'com.github.tomakehurst', name: 'wiremock-jre8', version: '2.32.0'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.9.0'
    testImplementation group: 'com.github.bibsysdev', name: 'logutils', version: '1.24.8'
    implementation group: 'com.github.bibsysdev', name: 'nva-language', version: '1.0'
    implementation group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.1'
    implementation group: 'com.amazonaws', name: 'aws-lambda-java-log4j2', version: '1.5.1'
    implementation group: 'com.amazonaws', name: 'aws-lambda-java-events', version: '3.11.0'
    implementation group: 'software.amazon.awssdk', name: 's3', version: '2.17.175'
    implementation group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '3.0.2'
    implementation 'org.apache.logging.log4j:log4j-api:2.17.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.2'
    implementation 'org.apache.logging.log4j:log4j-slf4j18-impl:2.17.1'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.7'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.0'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    implementation group: 'com.github.bibsysdev', name: 's3', version: '1.24.8'
    implementation group: 'com.github.bibsysdev', name: 'core', version: '1.24.8'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.1'
    implementation project(path: ":basebibliotek-generated", configuration: 'default')
    implementation project(path: ":alma-generated", configuration: 'default')

    shadowJar {
        archiveClassifier.set('')
        zip64 true
    }
}

test {

    environment "API_HOST", "api.localhost.nva.aws.unit.no"
    environment "REPORT_BUCKET", "reportBucket"
    environment "BASEBIBLIOTEK_USERNAME", "username"
    environment "BASEBIBLIOTEK_PASSWORD", "password"
    environment "BASEBIBLIOTEK_URL", "mock.url.com"
    environment "BASEBIBLIOTEK_XML_BUCKET", "basebibliotekXmlBucket"

    useJUnitPlatform()
    failFast = true
    finalizedBy jacocoTestReport
}

// We don't want a jar, just a fatJar
jar.enabled = false
project.tasks.build.dependsOn project.tasks.shadowJar

pmd {
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco")
    }
}

jacoco {
    toolVersion = "0.8.5"
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }
        }
    }
}

test {
    environment "ALMA_API_HOST", "https://localhost:63535"
    environment "ALMA_APIKEY", "apiKeyNZ"
}