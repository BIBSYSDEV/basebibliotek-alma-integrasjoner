plugins {
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'nebula.lint' version '17.7.0'
}

sourceCompatibility = JavaVersion.VERSION_11  // source-code version and must be <= targetCompatibility
targetCompatibility = JavaVersion.VERSION_11 // bytecode target version

group 'no.sikt'
version '1.0-SNAPSHOT'


allprojects {
    apply plugin: 'java'

    repositories {
        mavenCentral()
    }
}

subprojects {

    subproject ->
        if (!subproject.name.endsWith("-generated")) {
            apply plugin: 'checkstyle'
            apply plugin: 'pmd'
            apply plugin: 'jacoco'
            apply plugin: 'com.github.johnrengelman.shadow'
            apply plugin: 'nebula.lint'
            gradleLint.rules = ['all-dependency']
        }

}

test {
    useJUnitPlatform()
    failFast = true
    finalizedBy jacocoTestReport
}


// We don't want a jar, just a fatJar
jar.enabled = false
project.tasks.build.dependsOn project.tasks.shadowJar

pmd {
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
}

tasks.withType(Checkstyle) {
    exclude('*generated')
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}

gradleLint {
    rules = ['all-dependency']
    reportFormat = 'html'
    reportOnlyFixableViolations = true
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco")
    }
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
        }
    }
}
